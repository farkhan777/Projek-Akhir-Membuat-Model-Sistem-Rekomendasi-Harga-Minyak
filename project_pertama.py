# -*- coding: utf-8 -*-
"""Project pertama.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FZymGbxobWvt2uFYwGqOBQ_nXxJd-R4c

# **Instalasi Kaggle**

Import kaggle untuk mengambil data
"""

!pip install -q kaggle

"""Masukkan file .json yang berisikan username dan key"""

from google.colab import files

files.upload()

! mkdir ~/.kaggle

! cp kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

"""Megunduh dataset dari platform kaggle.com"""

!kaggle datasets download -d mabusalah/brent-oil-prices

"""# **Import Library**"""

import os
import zipfile
import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt 
from sklearn import preprocessing
from sklearn.model_selection import train_test_split

"""# **Ekstraksi & Load Data**

Ekstraksi data
"""

local_zip = '/content/brent-oil-prices.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

"""Membuat dataframe"""

df=pd.read_csv('/content/BrentOilPrices.csv')
df

"""# **Informasi Data**

Memeriksa informasi data
"""

df.info()

"""Cek apakah ada data yang kosong"""

df.isnull().sum()

"""Deskripsi data"""

df.describe()

"""# **Data Analysis**

Mengganti format data "Date" menggunakan to_datetime yang ada pada library pandas. Lalu menyorting data "Date" dari tahun 1987 ke 2021 menggunakan sort_values yang juga ada pada library pandas.
"""

df['Date'] = pd.to_datetime(df['Date'])
df = df.sort_values(by=['Date'])
print(df.dtypes)
df

"""Menghilangkan kolom nomor rows menggunakan drop"""

df.index = df['Date']
df = df.drop(['Date'], axis=1)
df

"""Membuat plot harga minyak dari tahun ke tahun menggunakan fungsi plot dari library matplotlib."""

plt.figure(figsize=(15,5))
plt.plot(df)
plt.xlabel('Date', fontsize=20)
plt.ylabel('Price', fontsize=20)
plt.title('Oil Price', fontsize=20)
plt.show()

"""# **Scaling Data**

Melakaukan preprocessing data menggunakan MinMaxScaler yang berfungsi untuk mengubah data berada di rentang 0 sampai 1
"""

mm_scaler = preprocessing.MinMaxScaler()
df = mm_scaler.fit_transform(df)
train_data, test_data = df[0:int(len(df)*0.8), :], df[int(len(df)*0.8):len(df), :]
mm_scaler.transform(test_data)

"""Score mae"""

MAE_SCORE = (train_data.max() - train_data.min()) * 10/100
print(MAE_SCORE)

"""Membuat fungsi dataset_preparation untuk menyiapkan dataset"""

def dataset_preparation(dataset, window):
    df = []
    label = []

    for i in range(len(dataset) - window - 1):
        data = dataset[i:(i + window), 0]
        df.append(data)
        label.append(dataset[i+window,0])
    return np.array(df), np.array(label)

x_train, y_train = dataset_preparation(train_data,80)
x_test, y_test = dataset_preparation(test_data,80)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1],1))
x_test = np.reshape(x_test, (x_test.shape[0], x_train.shape[1],1))

print('trainX shape == {}.'.format(x_train.shape))
print('trainY shape == {}.'.format(y_train.shape))
print('testX shape == {}.'.format(x_test.shape))
print('testY shape == {}.'.format(y_test.shape))

"""# **Modeling**

Untuk arsitektur model gunakan 1 buah layer LSTM
"""

model = tf.keras.models.Sequential([
                                    tf.keras.layers.LSTM(60, input_shape = (x_train.shape[1], 1)),
                                    tf.keras.layers.Dropout(0.2),
                                    tf.keras.layers.Dense(1)
])

"""Membuat callback function"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('loss')<0.0005 and logs.get('val_loss') <0.0005):
      print("\ntraining berhenti")
      self.model.stop_training = True
callbacks = myCallback()

"""Pada optimizer menggunakan parameter adam seperti di bawah. Loss function yang dapat dicoba untuk ini adalah MSE (Mean Squared Error)."""

model.compile(
    loss='mean_squared_error',
    optimizer='adam', 
    metrics=["mae"])

"""Hasil dari pelatihan model adalah sebagai berikut yang menunjukkan model memiliki loss yang relatif rendah."""

hist = model.fit(
    x_train, 
    y_train, 
    validation_data=(x_train, y_train),
    epochs=15,
    callbacks=[callbacks],
    batch_size=64,
    verbose=1,)

"""Menampilkan plot loss"""

plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.ylabel('Loss Train')
plt.xlabel('Loss Validation')
plt.legend(['Loss Train', 'Loss Validation'], loc='upper right')
plt.show()

"""Menampilkan plot mae"""

plt.plot(hist.history['mae'])
plt.plot(hist.history['val_mae'])
plt.ylabel('Mae Train')
plt.xlabel('Mae Validation')
plt.legend(['Mae Train', 'Mae Validation'], loc='upper right')
plt.show()

"""Memprediksi tiap step menggunakan predict yang ada pada library sklearn"""

predict_model_test = model.predict(x_test)
predict_model_test = mm_scaler.inverse_transform(predict_model_test)
actual_model_test = mm_scaler.inverse_transform([y_test])

"""Membandingkan grafik prediksi dan yang sebenarnya"""

plot=[i for i in range(1000)]
plt.figure(figsize=(15,5))
plt.plot(plot, actual_model_test[0][:1000])
plt.plot(plot, predict_model_test[:,0][:1000], 'red')
plt.ylabel('Price in USD', size=15)
plt.xlabel('Time step', size=15)
plt.legend(["Actual", "Prediction"], fontsize=15, loc='lower left')
plt.show();

"""Dari grafik di atas dapat dilihat bahwa prediksi yang diasilkan menyerupai aslinya."""